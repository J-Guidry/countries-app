(()=>{"use strict";var e={68:(e,t,n)=>{var r=n(294),a=n(935),o=n(727),l=n(550);function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,o=void 0;try{for(var l,c=e[Symbol.iterator]();!(r=(l=c.next()).done)&&(n.push(l.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var u=(0,r.createContext)(),s=(u.Consumer,function(e){var t=e.children,n=c((0,r.useState)({lightTheme:!0}),2),a=n[0],o=n[1],l={light:{"--background":"hsl(0, 0%, 98%)","--elements":"hsl(0, 0%, 100%)","--text":"hsl(200, 15%, 8%)"},dark:{"--background":" hsl(207, 26%, 17%)","--elements":"hsl(209, 23%, 22%)","--text":"hsl(0, 0%, 100%)"}},i={themeBool:a,toggleThemeBool:function(){return o((function(e){return{lightTheme:!e.lightTheme}}))},toggleTheme:function(e){Object.entries(l[e]).map((function(e){var t=c(e,2),n=t[0],r=t[1];document.documentElement.style.setProperty(n,r)}))}};return r.createElement(u.Provider,{value:i},t)});function m(e){var t=(0,r.useContext)(u),n='<svg xmlns="http://www.w3.org/2000/svg" width="18" height="12"><path fill="none" \n      stroke="'.concat(t.themeBool.lightTheme?"#111517":"#ffffff",'" stroke-width="3" d="M1 1l8 8 8-8"/></svg>'),a=window.btoa(n).toString();return r.createElement("div",{className:"action"},r.createElement("div",{className:"input-with-icon"},r.createElement("input",{onKeyDown:e.handleInput,placeholder:"Search for a country...",className:"input",required:!0}),r.createElement("i",{className:"icon-search"})),r.createElement("select",{onChange:e.regionSelect,className:"select-country",style:{backgroundImage:"url(data:image/svg+xml;base64,"+a+")"}},r.createElement("option",null,"Filter by Region"),r.createElement("option",{value:"africa"},"Africa"),r.createElement("option",{value:"americas"},"Americas"),r.createElement("option",{value:"asia"},"Asia"),r.createElement("option",{value:"europe"},"Europe"),r.createElement("option",{value:"oceania"},"Oceania")))}function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){h(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const y=function(e){return r.createElement("li",null,r.createElement(o.rU,{to:{pathname:"/country/".concat(e.name.split(" ").join("_").toLowerCase()),state:p({},e)}},r.createElement("div",{className:"flag"},r.createElement("img",{className:"flag-img",src:e.flag,alt:"Flag of ".concat(e.name)})),r.createElement("div",{className:"info"},r.createElement("h3",null,e.name),r.createElement("p",null,r.createElement("span",{className:"country-label"},"Population:"),e.population),r.createElement("p",null,r.createElement("span",{className:"country-label"},"Region:"),e.region),r.createElement("p",null,r.createElement("span",{className:"country-label"},"Capital:"),e.capital))))},b=function(e){return r.createElement("div",null,e.countriesLength>0&&r.createElement("ul",{className:"output"},e.countries.map((function(e){return r.createElement(y,{key:e.name,flag:e.flag,name:e.name,population:e.population.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1,"),region:e.region,capital:e.capital,borders:e.borders,nativeName:e.nativeName,topLevelDomain:e.topLevelDomain,currencies:e.currencies,languages:e.languages,subRegion:e.subregion})}))))};function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function E(e,t){return!t||"object"!==g(t)&&"function"!=typeof t?w(e):t}function w(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function O(e){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(c,e);var t,n,a,o,l=(a=c,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=O(a);if(o){var n=O(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return E(this,e)});function c(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(t=l.call(this,e)).handleRegionSelect=t.handleRegionSelect.bind(w(t)),t.handleInput=t.handleInput.bind(w(t)),t.state={countries:[]},t}return t=c,(n=[{key:"componentDidMount",value:function(){var e=this;["usa","germany","brazil","iceland"].forEach((function(t){var n=new URL("https://restcountries.eu/rest/v2/name/".concat(t));fetch(n).then((function(e){return e.json()})).then((function(t){e.setState((function(e){return{countries:e.countries.concat(t)}}))}))}))}},{key:"handleRegionSelect",value:function(e){var t=this,n=e.target.value;if("Filter by Region"!==n){var r=new URL("https://restcountries.eu/rest/v2/region/".concat(n));fetch(r).then((function(e){return e.json()})).then((function(e){t.setState((function(){return{countries:e}}))}))}}},{key:"handleInput",value:function(e){var t=this;if("Enter"===e.key){var n=e.target.value,r=new URL("https://restcountries.eu/rest/v2/name/".concat(n));fetch(r).then((function(e){return e.json()})).then((function(e){t.setState((function(){return{countries:e}}))})).then((function(e){return e}))}}},{key:"render",value:function(){return r.createElement("div",null,r.createElement("main",null,r.createElement("div",{className:"container"},r.createElement(m,{regionSelect:this.handleRegionSelect,handleInput:this.handleInput}),r.createElement(b,{countriesLength:this.state.countries.length,countries:this.state.countries}))))}}])&&d(t.prototype,n),c}(r.Component);function S(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const N=function(){var e,t,n=(e=(0,r.useState)("Light Mode"),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,o=void 0;try{for(var l,c=e[Symbol.iterator]();!(r=(l=c.next()).done)&&(n.push(l.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return S(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?S(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=n[0],o=n[1],l=(0,r.useContext)(u);return r.createElement("header",{className:"header"},r.createElement("h1",null,"Where in the world?"),r.createElement("button",{className:"mode",onClick:function(){o((function(e){return"Dark Mode"===e?(l.toggleThemeBool(),l.toggleTheme("light"),"Light Mode"):(l.toggleThemeBool(),l.toggleTheme("dark"),"Dark Mode")}))}},r.createElement("i",{className:l.themeBool.lightTheme?"icon-sun":"icon-moon-o"}),r.createElement("span",{className:"mode-label"},a)))};function k(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function P(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?k(Object(n),!0).forEach((function(t){A(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):k(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function A(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function x(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,o=void 0;try{for(var l,c=e[Symbol.iterator]();!(r=(l=c.next()).done)&&(n.push(l.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}}(e,t)||C(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function C(e,t){if(e){if("string"==typeof e)return R(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?R(e,t):void 0}}function R(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const T=function(){var e=(0,l.TH)();console.log(r.useContext);var t=x((0,r.useState)([]),2),n=t[0],a=t[1],c=x((0,r.useState)(!0),2),i=c[0],u=c[1],s=x((0,r.useState)(null),2),m=(s[0],s[1]),f=(0,l.k6)(),p=e.state,h=(0,l.UO)();return(0,r.useEffect)((function(){if(h){var e=new AbortController;return f.length>3&&a([]),p.borders.forEach((function(t,n,r){var o=new URL("https://restcountries.eu/rest/v2/alpha/".concat(t));u(!0),fetch(o,{signal:e.signal}).then((function(e){if(!e.ok)throw Error("could not fetch the data for that resource");return e.json()})).then((function(e){a((function(t){return[].concat(function(e){return function(e){if(Array.isArray(e))return R(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||C(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(t),[e])})),m(null),n===r.length-1&&(u(!1),r.length)})).catch((function(e){u(!1),m(e.message)}))})),function(){return e.abort()}}}),[h]),r.createElement("div",{className:"detail-page"},r.createElement("button",{className:"back-btn",onClick:function(){u(!0),f.goBack()}},r.createElement("i",{class:"icon-arrow-left"}),"Back"),r.createElement("div",{className:"country-detail-wrapper"},r.createElement("div",{className:"flag-detail"},r.createElement("img",{src:p.flag,alt:"Flag of ".concat(p.name)})),r.createElement("div",{className:"country-detail"},r.createElement("h1",null,p.name),r.createElement("div",{className:"detail-column"},r.createElement("p",null,r.createElement("span",{className:"country-label"},"Native Name: "),p.nativeName),r.createElement("p",null,r.createElement("span",{className:"country-label"},"Population: "),p.population),r.createElement("p",null,r.createElement("span",{className:"country-label"},"Region: "),p.region),r.createElement("p",null,r.createElement("span",{className:"country-label"},"Sub Region: "),p.subRegion),r.createElement("p",null,r.createElement("span",{className:"country-label"},"Capital: "),p.capital)),r.createElement("div",{className:"detail-column"},r.createElement("p",null,r.createElement("span",{className:"country-label"},"Top Level Domain: "),p.topLevelDomain.map((function(e,t){return r.createElement("span",{key:t}," ",e," ")}))),r.createElement("p",null,r.createElement("span",{className:"country-label"},"Currencies: "),p.currencies.map((function(e,t){return r.createElement("span",{key:t}," ",e.name," ")}))),r.createElement("p",null,r.createElement("span",{className:"country-label"},"Languages: "),p.languages.map((function(e,t){return r.createElement("span",{key:t}," ",e.name," ")})))),0===n.length?"":!0===i?r.createElement("span",null,"loading..."):r.createElement("div",{className:"border-countries"},r.createElement("span",{className:"country-label"},"Border Countries: "),n.map((function(e,t){return r.createElement(o.rU,{key:t,to:{pathname:"/country/".concat(e.name.split(" ").join("_").toLowerCase()),state:P({},e)}},r.createElement("span",{key:t,className:"border-country"},e.name))}))))))},I=function(){return r.createElement(o.VK,null,r.createElement("div",null,r.createElement(s,null,r.createElement(N,null),r.createElement(l.rs,null,r.createElement(l.AW,{path:"/country/:country"},r.createElement(T,null)),r.createElement(l.AW,{path:"/",exact:!0},r.createElement(j,null))))))};a.render(r.createElement(I,null),document.getElementById("app"))}},t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.m=e,n.x=e=>{},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e={376:0},t=[[68,165,764,659,424,791]],r=e=>{},a=(a,o)=>{for(var l,c,[i,u,s,m]=o,f=0,p=[];f<i.length;f++)c=i[f],n.o(e,c)&&e[c]&&p.push(e[c][0]),e[c]=0;for(l in u)n.o(u,l)&&(n.m[l]=u[l]);for(s&&s(n),a&&a(o);p.length;)p.shift()();return m&&t.push.apply(t,m),r()},o=self.webpackChunkproject=self.webpackChunkproject||[];function l(){for(var r,a=0;a<t.length;a++){for(var o=t[a],l=!0,c=1;c<o.length;c++){var i=o[c];0!==e[i]&&(l=!1)}l&&(t.splice(a--,1),r=n(n.s=o[0]))}return 0===t.length&&(n.x(),n.x=e=>{}),r}o.forEach(a.bind(null,0)),o.push=a.bind(null,o.push.bind(o));var c=n.x;n.x=()=>(n.x=c||(e=>{}),(r=l)())})(),n.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,